* DOCUMENTATION FOR MINITALK
Source: wikipedia, man, linuxhint.

** SIGNALS
Signals are a limited form of inter-process communication.
They are generated to notify a process or a thread of an event.
Upon reception of a signal, the process or thread is interrupted untils the signal handler
returns.

A signal can be generated by calling kill(), which then sends it to a specific process.
See dedicated section.

The C standard defines only 6 signals:
|---------+-----------------------------------------------------------------|
| name    | description                                                     |
|---------+-----------------------------------------------------------------|
| SIGABRT | "abort", abnormal termination                                   |
|---------+-----------------------------------------------------------------|
| SIGFPE  | floating point exception.                                       |
|---------+-----------------------------------------------------------------|
| SIGILL  | "illegal", invalid instruction.                                 |
|---------+-----------------------------------------------------------------|
| SIGINT  | "interrupt", interactive attention request sent to the program. |
|---------+-----------------------------------------------------------------|
| SIGSEGV | "segmentation violation", invalid memory access.                |
|---------+-----------------------------------------------------------------|
| SIGTERM | "terminate", termination request sent to the program.           |
|---------+-----------------------------------------------------------------|

UNIX defines more, but for this project we will only focus SIGUSR1 and SIGUSR2.
They represent user-defined conditions.
If a process does not define a behavior for them, the default action is to Terminate.

TIP: always use the name of the signal, not its value, as they're standard.

** SENDING SIGNALS - KILL()
   int kill(pid_t _pid_, int _signum_);

The  kill()  system  call  can  be  used  to send signal _signum_ to any process group or
process specified by _pid_.

If _signum_ is 0, then no signal is sent, but existence and permission checks are  still
performed. This  can  be used to check for the existence of a process ID or process
group ID that the caller is permitted to signal.

If _pid_:
    -is *postive*: _signum_ is sent to the process represented by _pid_.

    -*equals 0*: _signum_ is sent to every process in the process group of the calling
        process.

    -*equals -1*: _signum_ is sent to every process for which the calling process
        has permission to send signals, except for process 1 (init).

    -*is less than -1*: _signum_ is sent to every process in the process group whose
        ID is _-pid_.

If one or more signal is sent, kill() is successful and returns 0.
On error, kill() returns -1 and errno is set appropriately. 

** SIGNAL HANDLING
A signal handler is a function which is called by the target environment when the
corresponding signal occurs.

Signal handlers can be set be with signal() or sigaction(). The behavior of signal()
has been changed multiple times across history and is now considered deprecated.

If the signal reports an error within the program (and the signal is not asynchronous),
the signal handler can terminate by calling abort(), exit(), or longjmp(). 

A process can replace the default signal handler for almost all signals by its userâ€™s
own handler function.
A signal handler function can have any name, but must have return type void and have
one int parameter.
Signal handlers can be specified for all but two signals (SIGKILL and SIGSTOP),
which cannot be caught, blocked or ignored. 

** SIGACTION
    int sigaction(int _signum_, const struct sigaction _*act_,
                  struct sigaction _*oldact_); 

The sigaction() system call is used to change the action taken by a process on receipt
of a specific signal.

_signum_ specifies the signal and can be any valid signal except SIGKILL and SIGSTOP.

If _act_ is non-null, the new action for signal _signum_ is installed from _act_. 
If _oldact_ is non-null, the previous action is saved in _oldact_. 

The sigaction structure is defined as:
struct sigaction {
      void      (*sa_handler)(int);
      void      (*sa_sigaction)(int, siginfo_t *, void *);
      sigset_t  sa_mask;
      int       sa_flags;
      void      (*sa_restorer)(void);
}

_sa_handler_ specifies the action to be associated with _signum_:
     -SIG_DFL for the default action,
     -SIG_IGN to ignore this signal,
     -a pointer to a signal handling function.
This function receives the signal number as its only argument. 

_sa_sigaction_ specifies the signal-handling function for signum instead of _sa_handler_
if SA_SIGINFO is specified in _sa_flags_.
This function receives as arguments (in order):
    -the signal number,
    -a pointer to a _siginfo_t_,
    -a pointer to a _ucontext_t_ (cast to void *). 

The _siginfo_t_ parameter is a struct with the following elements:
siginfo_t {
    int      si_signo;  /* Signal number */
    int      si_errno;  /* An errno value */
    int      si_code;   /* Signal code */
    pid_t    si_pid;    /* Sending process ID */
    uid_t    si_uid;    /* Real user ID of sending process */
    int      si_status; /* Exit value or signal */
    clock_t  si_utime;  /* User time consumed */
    clock_t  si_stime;  /* System time consumed */
    sigval_t si_value;  /* Signal value */
    int      si_int;    /* POSIX.1b signal */
    void *   si_ptr;    /* POSIX.1b signal */
    void *   si_addr;   /* Memory location which caused fault */
    int      si_band;   /* Band event */
    int      si_fd;     /* File descriptor */
}

/!\ On some architectures a union is involved: do not assign to both sa_handler and 
       sa_sigaction.

_sa_mask_ gives a mask of signals which should be blocked during execution of
the signal handler.
The signal which triggered the handler will be blocked, unless the SA_NODEFER flag
is used.

_sa_flags_ specifies a set of flags which modify the behaviour of the signal handling
process. It is formed by the bitwise OR of zero or more of the following:

|--------------+------------------------------------------------------------------|
| tag          | description                                                      |
|--------------+------------------------------------------------------------------|
| SA_NOCLDSTOP | If _signum_ is SIGCHLD, do not receive notification when child   |
|              | processes stop (when they receive SIGSTOP, SIGTSTP, SIGTTIN)     |
|              | or SIGTTOU or resume (when they receive SIGCONT)                 |
|--------------+------------------------------------------------------------------|
| SA_NOCLDWAIT | If _signum_ is SIGCHLD, do not transform children into zombies   |
|              | when they terminate.                                             |
|--------------+------------------------------------------------------------------|
| SA_RESETHAND | Restore the signal action to the default state once the          |
|              | signal handler has been called.                                  |
|              | SA_ONESHOT is an obsolete, non-standard synonym for this flag.   |
|--------------+------------------------------------------------------------------|
| SA_ONSTACK   | Call the signal handler on an alternate signal stack provided    |
|              | by sigaltstack(2).                                               |
|              | If no alternate stack is available, the default stack is used.   |
|--------------+------------------------------------------------------------------|
| SA_RESTART   | Provide behaviour compatible with BSD signal semantics by making |
|              | certain system calls restartable across signals.                 |
|--------------+------------------------------------------------------------------|
| SA_NODEFER   | Do not prevent the signal from being received from within its    |
|              | own signal handler.                                              |
|              | SA_NOMASK is an obsolete, non-standard synonym for this flag.    |
|--------------+------------------------------------------------------------------|
| SA_SIGINFO   | _sa_sigaction_ should be set instead of _sa_handler_.            |
|--------------+------------------------------------------------------------------|

/!\ The _sa_restorer_ element is obsolete and should not be used.

sigaction() returns 0 on success and -1 on error.

** SIGNAL SETS
