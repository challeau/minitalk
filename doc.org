* DOCUMENTATION FOR MINITALK
Source: wikipedia, man.

** SIGNALS
Signals are a limited form of inter-process communication.
They are generated to notify a process or a thread of an event.
Upon reception of a signal, the process or thread is interrupted untils the signal handler
returns.

A signal can be generated by calling kill(), which then sends it to a specific process.
See dedicated section.

The C standard defines only 6 signals:
    -SIGABRT - "abort", abnormal termination.
    -SIGFPE - floating point exception.
    -SIGILL - "illegal", invalid instruction.
    -SIGINT - "interrupt", interactive attention request sent to the program.
    -SIGSEGV - "segmentation violation", invalid memory access.
    -SIGTERM - "terminate", termination request sent to the program.

UNIX defines more, but for this project we will only focus SIGUSR1 and SIGUSR2.
They represent user-defined conditions.
If a process does not define a behavior for them, the default action is to Terminate.

TIP: always use the name of the signal, not its value, as they're standard.

** SENDING SIGNALS - KILL()
   int kill(pid_t _pid_, int _signum_)

The  kill()  system  call  can  be  used  to send signal _signum_ to any process group or
process specified by _pid_.

If _signum_ is 0, then no signal is sent, but existence and permission checks are  still
performed. This  can  be used to check for the existence of a process ID or process
group ID that the caller is permitted to signal.

If _pid_:
    -is *postive*: _signum_ is sent to the process represented by _pid_.

    -*equals 0*: _signum_ is sent to every process in the process group of the calling
        process.

    -*equals -1*: _signum_ is sent to every process for which the calling process
        has permission to send signals, except for process 1 (init).

    -*is less than -1*: _signum_ is sent to every process in the process group whose
        ID is _-pid_.

If one or more signal is sent, kill() is successful and returns 0.
On error, kill() returns -1 and errno is set appropriately. 

** SIGNAL HANDLING
A signal handler is a function which is called by the target environment when the
corresponding signal occurs.

Signal handlers can be set be with signal() or sigaction(). The behavior of signal()
has been changed multiple times across history and is now considered deprecated.

If the signal reports an error within the program (and the signal is not asynchronous),
the signal handler can terminate by calling abort(), exit(), or longjmp(). 

A process can replace the default signal handler for almost all signals by its userâ€™s
own handler function.
A signal handler function can have any name, but must have return type void and have
one int parameter.

Signal handlers can be specified for all but two signals -SIGKILL and SIGSTOP,
which cannot be caught, blocked or ignored. 
